// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript support enables the \`typescript\` parser plugin for ts/tsx files 1`] = `
"import \\"./typescript__jsxstyle.css\\";
import * as React from 'react';
export interface ThingProps {
  thing1: string;
  thing2?: boolean;
}
export const Thing: React.FC<ThingProps> = props => <div className=\\"_x0\\" />;
ReactDOM.render(<Thing />, (document.getElementById('root') as HTMLElement));"
`;

exports[`Typescript support enables the \`typescript\` parser plugin for ts/tsx files 2`] = `
"import \\"./typescript__jsxstyle.css\\";
import * as React from 'react';
export interface ThingProps {
  thing1: string;
  thing2?: boolean;
}
export const Thing: React.FC<ThingProps> = props => <div className=\\"_x0\\" />;
ReactDOM.render(<Thing />, (document.getElementById('root') as HTMLElement));"
`;

exports[`animation prop properly extracts object-type animation props 1`] = `
"import \\"./animation-prop__jsxstyle.css\\";
<div className=\\"_x0 _x1\\" />;"
`;

exports[`animation prop properly extracts object-type animation props 2`] = `
"@keyframes _x0 { 0%, 50% { opacity:0;padding-left:30px; } 100% { opacity:1;padding-h:50px; } }
._x0 { animation-name:_x0 }
._x1 { display:block }
"
`;

exports[`deterministic rendering generates a classname hash of \`_d3bqdr\` for the specified style object 1`] = `
"import \\"./consistent-hashes__jsxstyle.css\\";
<div className=\\"_1jvcvsh _1vzzc6z _cmecz0 _fmtdho\\" />;"
`;

exports[`deterministic rendering generates a classname hash of \`_d3bqdr\` for the specified style object 2`] = `
"._1jvcvsh { color:red }
._cmecz0 { display:block }
._1vzzc6z:hover { color:green }
@media example media query { ._fmtdho._fmtdho:active { color:blue } }
"
`;

exports[`deterministic rendering generates deterministic class names when classNameFormat is set to \`hash\` 1`] = `
"import \\"./deteministic-classes__jsxstyle.css\\";
<div className={(condition ? \\"_o84axs\\" : \\"_jzempz\\") + \\" _cmecz0\\"} />;"
`;

exports[`edge cases handles consts with no inits 1`] = `
"import \\"./const-sans-init__jsxstyle.css\\";

for (const thing in things) {
  <div className=\\"_x0\\" />;
}"
`;

exports[`edge cases only removes component imports 1`] = `
"import \\"./edge-case1__jsxstyle.css\\";
import { cache, InvalidComponent } from 'jsxstyle';

// should probably remove this as well
require('jsxstyle');

const {
  invalid,
  AlsoInvalid
} = require('jsxstyle');"
`;

exports[`element conversion converts jsxstyle elements to Block elements when some props aren’t static 1`] = `
"import \\"./extract-static2__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
const val = \\"thing\\";
import LC from \\"./LC\\";
<Box dynamicValue={notStatic} className=\\"_x0 _x1 _x2 _x3 _x4\\" />;"
`;

exports[`element conversion converts jsxstyle elements to Block elements when some props aren’t static 2`] = `
"._x0 { display:block }
._x1 { static-int:69px }
._x2 { static-member-expression:ok }
._x3 { static-string:wow }
._x4 { static-value:thing }
"
`;

exports[`element conversion converts jsxstyle elements to plain elements when all props are static 1`] = `
"import \\"./extract-static1__jsxstyle.css\\";
import LC from \\"./LC\\";
const val = \\"thing\\";
<div className=\\"_x0 _x1 _x2 _x3 _x4 _x5 _x6\\" />;"
`;

exports[`element conversion converts jsxstyle elements to plain elements when all props are static 2`] = `
"._x0 { display:block }
._x1 { static-float:6.9px }
._x2 { static-int:69px }
._x3 { static-member-expression:ok }
._x4 { static-negative-int:-420px }
._x5 { static-string:wow }
._x6 { static-value:thing }
"
`;

exports[`evaluateVars config option does not evaluate vars if evaluateVars is set to false 1`] = `
"import \\"./evaluateVars__jsxstyle.css\\";
const staticProp = 'static';
<div className=\\"_x0 _x1 _x2\\" />;"
`;

exports[`evaluateVars config option does not evaluate vars if evaluateVars is set to false 2`] = `
"import \\"./evaluateVars__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
const staticProp = 'static';
<Box thing1={staticProp} className=\\"_x0 _x1\\" />;"
`;

exports[`jsxstyle-specific props converts complex \`component\` prop values to varable declarations 1`] = `
"import \\"./funky-component-prop__jsxstyle.css\\";

function Test({
  component,
  thing
}) {
  const Compy = component;
  var Component = Compy || 'h1',
      Component2 = complex,
      Component3 = \\"Complex\\";
  <Component className=\\"_x0\\">
    <Component2 className=\\"_x0\\">
      <Component3 className=\\"_x0\\" />
    </Component2>
  </Component>;
  var Component4 = complex;
  <Component4 className=\\"_x0\\" />;
}"
`;

exports[`jsxstyle-specific props does not attempt to extract a ref prop found on a jsxstyle component 1`] = `
"import \\"./props-prop2__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<Box ref={this.cannotBeExtracted} className=\\"_x0 _x1\\" />;"
`;

exports[`jsxstyle-specific props evaluates the \`mediaQueries\` prop correctly 1`] = `
"import \\"./media-queries__jsxstyle.css\\";
import LC from \\"./LC\\";
<div className=\\"_x0 _x1 _x2\\" />;"
`;

exports[`jsxstyle-specific props evaluates the \`mediaQueries\` prop correctly 2`] = `
"._x0 { display:block }
@media small media query { ._x1._x1 { width:100% } }
._x2 { width:640px }
"
`;

exports[`jsxstyle-specific props handles the \`className\` prop correctly 1`] = `
"import \\"./class-name1__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<Box display=\\"flex\\" flexDirection=\\"row\\" className={member.expression} {...spread} />;
<div className=\\"orange _x0\\" />;"
`;

exports[`jsxstyle-specific props handles the \`component\` prop correctly 1`] = `
"import \\"./component-prop1__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<input className=\\"_x0\\" />;
<Thing className=\\"_x0\\" />;
<thing.cool className=\\"_x0\\" />;
<Box display=\\"block\\" component=\\"h1\\" {...spread} />;
<Box component=\\"h1\\" dynamic={wow} className=\\"_x0 _x1 _x2\\" />;"
`;

exports[`jsxstyle-specific props handles the \`mediaQueries\` prop correctly 1`] = `
"import \\"./media-queries__jsxstyle.css\\";
<div className=\\"_x0 _x1 _x2\\" />;"
`;

exports[`jsxstyle-specific props handles the \`mediaQueries\` prop correctly 2`] = `
"._x0 { display:block }
@media only screen and (min-width: 640px) { ._x1._x1 { width:100% } }
._x2 { width:640px }
"
`;

exports[`jsxstyle-specific props handles the \`props\` prop correctly 1`] = `
"import \\"./props-prop1__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<div staticObject=\\"yep\\" className=\\"_x0\\" />;
<div className=\\"_x0\\" />;
<div {...variable} className=\\"_x0\\" />;
<div {...calledFunction()} className=\\"_x0\\" />;
<div {...member.expression} className=\\"_x0\\" />;
<div objectShorthand={objectShorthand} className=\\"_x0\\" />;
<div {...one} two={{
  three,
  four: \\"five\\",
  ...six
}} className=\\"_x0 _x1\\" />;
<div aria-hidden={true} className=\\"_x0\\" />;
<Box props={{
  className: \\"test\\"
}} className=\\"_x0\\" />;
<Box props={{
  style: \\"test\\"
}} className=\\"_x0\\" />;
<Box props=\\"invalid\\" className=\\"_x0\\" />;
<Box dynamicProp={wow} props=\\"invalid\\" className=\\"_x0\\" />;
<Box props={{
  \\"aria hidden\\": true
}} className=\\"_x0\\" />;
<Box props={{
  \\"-aria-hidden\\": true
}} className=\\"_x0\\" />;"
`;

exports[`spread operators doesn't explode if you use the spread operator 1`] = `
"import \\"./rest-spread__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";

const BlueBlock = ({
  wow,
  ...props
}) => <Box display=\\"block\\" color=\\"blue\\" {...props} test={null} className=\\"_x0\\" />;

const DynamicBlock = ({
  wow,
  ...props
}) => <Box display=\\"block\\" dynamicProp={wow} {...props} />;"
`;

exports[`spread operators extracts spreads from trusted sources 1`] = `
"import \\"./trusted-spreads__jsxstyle.css\\";
import LC from \\"./LC\\";
const staticSpread = {
  color: \\"#444\\",
  \\"width\\": 420
};

function Thing(props) {
  return <div className=\\"_x0 _x1 _x2 _x3 _x4 _x5\\" />;
}"
`;

exports[`spread operators extracts spreads from trusted sources 2`] = `
"._x0 { background-color:#FFF }
._x1 { border-radius:4px }
._x2 { box-shadow:0 1px 3px rgba(0,0,0,0.12), 0 0 0 1px rgba(0,0,0,0.07) }
._x3 { color:#444 }
._x4 { display:block }
._x5 { width:420px }
"
`;

exports[`spread operators handles props mixed with spread operators 1`] = `
"import \\"./spread__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<Box display=\\"block\\" doNotExtract=\\"no\\" {...spread} extract={null} className=\\"_x0\\" />;"
`;

exports[`spread operators handles props mixed with spread operators 2`] = `
"._x0 { extract:yep }
"
`;

exports[`spread operators handles reserved props before the spread operators 1`] = `
"import \\"./spread__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<Box display=\\"block\\" component=\\"wow\\" props={{
  test: 4
}} key={test} ref={test} style={{}} {...spread} color={null} className={(spread != null && spread.className || wow || \\"\\") + \\" _x0\\"} />;"
`;

exports[`spread operators handles reserved props before the spread operators 2`] = `
"._x0 { color:red }
"
`;

exports[`ternaries extracts a conditional expression with a static right side and an AND operator 1`] = `
"import \\"./ternary__jsxstyle.css\\";
<div className={(dynamic ? \\"_x1\\" : \\"\\") + \\" _x0\\"} />;"
`;

exports[`ternaries extracts a conditional expression with a static right side and an AND operator 2`] = `
"._x0 { display:block }
._x1 { color:red }
"
`;

exports[`ternaries extracts a ternary expression from a component that has a className specified 1`] = `
"import \\"./ternary-with-classname__jsxstyle.css\\";
<div className={\\"cool \\" + (dynamic ? \\"_x1\\" : \\"_x2\\") + \\" _x0\\"} />;"
`;

exports[`ternaries extracts a ternary expression from a component that has a className specified 2`] = `
"._x0 { display:block }
._x1 { color:red }
._x2 { color:blue }
"
`;

exports[`ternaries extracts a ternary expression from a component that has a spread operator specified 1`] = `
"import \\"./ternary-with-spread__jsxstyle.css\\";
import { Box } from \\"jsxstyle\\";
<Box display=\\"block\\" {...spread} color={null} className={dynamic ? \\"_x0\\" : \\"_x1\\"} />;"
`;

exports[`ternaries extracts a ternary expression from a component that has a spread operator specified 2`] = `
"._x0 { color:red }
._x1 { color:blue }
"
`;

exports[`ternaries extracts a ternary expression that has a whitelisted consequent and alternate 1`] = `
"import \\"./ternary__jsxstyle.css\\";
import LC from \\"./LC\\";
const blue = \\"blueberry\\";
<div className={(dynamic ? \\"_x1\\" : \\"_x2\\") + \\" _x0\\"} />;"
`;

exports[`ternaries extracts a ternary expression that has a whitelisted consequent and alternate 2`] = `
"._x0 { display:block }
._x1 { color:strawberry }
._x2 { color:blueberry }
"
`;

exports[`ternaries extracts a ternary expression that has static consequent and alternate 1`] = `
"import \\"./ternary__jsxstyle.css\\";
<div className={(dynamic ? \\"_x1\\" : \\"_x2\\") + \\" _x0\\"} />;"
`;

exports[`ternaries groups extracted ternary statements 1`] = `
"import \\"./ternary-groups__jsxstyle.css\\";
<div className={(dynamic ? \\"_x1 _x2\\" : \\"_x3 _x4\\") + \\" _x0\\"} />;"
`;

exports[`ternaries groups extracted ternary statements 2`] = `
"._x0 { display:block }
._x1 { color:red }
._x2 { width:200px }
._x3 { color:blue }
._x4 { width:400px }
"
`;

exports[`ternaries handles null values in ternaries correctly 1`] = `
"import \\"./ternary-null-values__jsxstyle.css\\";
<div className={(dynamic ? \\"\\" : \\"_x1\\") + \\" _x0\\"} />;"
`;

exports[`ternaries handles null values in ternaries correctly 2`] = `
"._x0 { display:block }
._x1 { color:blue }
"
`;

exports[`ternaries positivizes binary expressions 1`] = `
"import \\"./binary-expressions__jsxstyle.css\\";
<div className={(dynamic === 4 ? \\"_x1 _x2 _x3\\" : \\"_x4 _x5 _x6\\") + \\" _x0\\"} />;"
`;

exports[`ternaries positivizes binary expressions 2`] = `
"import \\"./binary-expressions__jsxstyle.css\\";
<div className={(dynamic == 4 ? \\"_x1 _x2 _x3\\" : \\"_x4 _x5 _x6\\") + \\" _x0\\"} />;"
`;

exports[`ternaries positivizes binary expressions 3`] = `
"._x0 { display:block }
._x1 { thing1:four }
._x2 { thing3:four }
._x3 { thing4:four }
._x4 { thing2:not four }
._x5 { thing3:not four }
._x6 { thing4:not four }
"
`;

exports[`ternaries positivizes unary expressions 1`] = `
"import \\"./unary-expressions__jsxstyle.css\\";
<div className={(dynamic % 2 ? \\"_x1 _x2 _x3\\" : \\"_x4 _x5 _x6\\") + \\" _x0\\"} />;"
`;

exports[`ternaries positivizes unary expressions 2`] = `
"._x0 { display:block }
._x1 { thing1:mod 2 }
._x2 { thing3:mod 2 }
._x3 { thing4:mod 2 }
._x4 { thing2:not mod 2 }
._x5 { thing3:not mod 2 }
._x6 { thing4:not mod 2 }
"
`;

exports[`the basics only extracts styles from valid jsxstyle components 1`] = `
"import \\"./validate__jsxstyle.css\\";
<Block extract=\\"nope\\" />;
<div className=\\"_x0 _x1\\" />;
<div className=\\"_x1 _x2 _x3\\" />;
<Col extract=\\"nope\\" />;
<InlineBlock extract=\\"nope\\" />;
<div className=\\"_x1 _x2\\" />;
<div className=\\"_x1 _x3 _x4\\" />;
<div className=\\"_x1 _x4 _x5\\" />;
<div className=\\"_x1 _x2 _x5\\" />;"
`;

exports[`the basics puts spaces between each class name 1`] = `
"import \\"./classname-spaces__jsxstyle.css\\";
<div className={\\"orange \\" + ((thing1 ? \\"_x1\\" : \\"_x2\\") + (\\" \\" + (thing2 ? \\"_x3\\" : \\"_x4\\"))) + \\" _x0\\"} />;"
`;

exports[`useMatchMedia extracts ternaries and conditional statements 1`] = `
"import \\"./useMatchMedia-extraction__jsxstyle.css\\";
import { useMatchMedia } from 'jsxstyle';
import React from 'react';
export const MyComponent = () => {
  const useMatchMedia_matchesMQ = /*#__PURE__*/useMatchMedia('matchMedia media query');
  return <>
        <div className=\\"_x0 _x1\\" />
        <div className=\\"_x0 _x1 _x2\\" />
      </>;
};"
`;

exports[`useMatchMedia extracts ternaries and conditional statements 2`] = `
"._x0 { display:block }
@media matchMedia media query { ._x1._x1 { color:red } }
._x2 { color:blue }
"
`;

exports[`useMatchMedia logs a warning when a \`mediaQueries\` prop is encountered 1`] = `
"import \\"./mediaqueries-plus-useMatchMedia__jsxstyle.css\\";
import { useMatchMedia } from 'jsxstyle';
import React from 'react';
export const MyComponent = () => {
  const useMatchMedia_matchesMQ = /*#__PURE__*/useMatchMedia('matchMedia media query');
  return <>
        <div className={(useMatchMedia_matchesMQ ? \\"_x2\\" : \\"_x3\\") + \\" _x0 _x1\\"} />
        <div className={(useMatchMedia_matchesMQ ? \\"_x2\\" : \\"_x3\\") + \\" _x0 _x1 _x4\\"} />
      </>;
};"
`;

exports[`useMatchMedia logs a warning when a \`mediaQueries\` prop is encountered 2`] = `
"._x0 { display:block }
@media inline media query { ._x1._x1 { color:red } }
._x2 { should-remain-inline:consequent }
._x3 { should-remain-inline:alternate }
._x4 { color:blue }
"
`;

exports[`useMatchMedia removes unused hook calls that are marked as "pure" 1`] = `
"import { useMatchMedia, Block } from \\"jsxstyle\\";

import React from \\"react\\";

export const MyComponent = () => {
    useMatchMedia(\\"this call stays\\");
    const usedThing = useMatchMedia(\\"this call stays as well\\");
    return React.createElement(Block, {
        usedThing: usedThing
    });
};"
`;
